{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhprasad/ai_grading_system/frontend/ai-grading-frontend/src/TestGrading/TestGrading.js\",\n  _s = $RefreshSig$();\n// src/TestGrading/TestGrading.js\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestGrading = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [grade, setGrade] = useState(null);\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    setImage(URL.createObjectURL(file));\n    processImage(file);\n  };\n  const processImage = file => {\n    const img = new Image();\n    img.src = URL.createObjectURL(file);\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n      const src = cv.imread(canvas);\n      const gray = new cv.Mat();\n      cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      // Detect circles (assuming the answers are marked with circles)\n      const circles = new cv.Mat();\n      cv.HoughCircles(gray, circles, cv.HOUGH_GRADIENT, 1, gray.rows / 8, 100, 30, 1, 30);\n\n      // Draw circles on the original image for visualization\n      for (let i = 0; i < circles.cols; ++i) {\n        const x = circles.data32F[i * 3];\n        const y = circles.data32F[i * 3 + 1];\n        const radius = circles.data32F[i * 3 + 2];\n        cv.circle(src, new cv.Point(x, y), radius, new cv.Scalar(255, 0, 0, 255), 3);\n      }\n      cv.imshow('canvasOutput', src);\n\n      // Extract text using Tesseract\n      Tesseract.recognize(canvas, 'eng', {\n        logger: m => console.log(m)\n      }).then(({\n        data: {\n          text\n        }\n      }) => {\n        console.log(text);\n        setText(text);\n        gradeTest(text);\n      }).catch(err => {\n        console.error(err);\n      });\n\n      // Clean up\n      src.delete();\n      gray.delete();\n      circles.delete();\n    };\n  };\n  const gradeTest = extractedText => {\n    fetch('http://localhost:5000/grade-test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: extractedText\n      })\n    }).then(response => response.json()).then(data => setGrade(data.grade)).catch(error => console.error('Error:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Grading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Uploaded test\",\n      style: {\n        maxWidth: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvasOutput\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Grade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: grade\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(TestGrading, \"vUTEuXHK9sagbgzEK/zSOONrmpI=\");\n_c = TestGrading;\nexport default TestGrading;\nvar _c;\n$RefreshReg$(_c, \"TestGrading\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","TestGrading","_s","image","setImage","text","setText","grade","setGrade","handleImageUpload","e","file","target","files","URL","createObjectURL","processImage","img","Image","src","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","cv","imread","gray","Mat","cvtColor","COLOR_RGBA2GRAY","circles","HoughCircles","HOUGH_GRADIENT","rows","i","cols","x","data32F","y","radius","circle","Point","Scalar","imshow","recognize","logger","m","console","log","then","data","gradeTest","catch","err","error","delete","extractedText","fetch","method","headers","body","JSON","stringify","response","json","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","alt","style","maxWidth","id","_c","$RefreshReg$"],"sources":["/Users/rishabhprasad/ai_grading_system/frontend/ai-grading-frontend/src/TestGrading/TestGrading.js"],"sourcesContent":["// src/TestGrading/TestGrading.js\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\n\nconst TestGrading = () => {\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [grade, setGrade] = useState(null);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    setImage(URL.createObjectURL(file));\n    processImage(file);\n  };\n\n  const processImage = (file) => {\n    const img = new Image();\n    img.src = URL.createObjectURL(file);\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n\n      const src = cv.imread(canvas);\n      const gray = new cv.Mat();\n      cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      // Detect circles (assuming the answers are marked with circles)\n      const circles = new cv.Mat();\n      cv.HoughCircles(gray, circles, cv.HOUGH_GRADIENT, 1, gray.rows / 8, 100, 30, 1, 30);\n\n      // Draw circles on the original image for visualization\n      for (let i = 0; i < circles.cols; ++i) {\n        const x = circles.data32F[i * 3];\n        const y = circles.data32F[i * 3 + 1];\n        const radius = circles.data32F[i * 3 + 2];\n        cv.circle(src, new cv.Point(x, y), radius, new cv.Scalar(255, 0, 0, 255), 3);\n      }\n\n      cv.imshow('canvasOutput', src);\n\n      // Extract text using Tesseract\n      Tesseract.recognize(\n        canvas,\n        'eng',\n        {\n          logger: (m) => console.log(m),\n        }\n      )\n        .then(({ data: { text } }) => {\n          console.log(text);\n          setText(text);\n          gradeTest(text);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n\n      // Clean up\n      src.delete();\n      gray.delete();\n      circles.delete();\n    };\n  };\n\n  const gradeTest = (extractedText) => {\n    fetch('http://localhost:5000/grade-test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ text: extractedText }),\n    })\n      .then((response) => response.json())\n      .then((data) => setGrade(data.grade))\n      .catch((error) => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <h1>Test Grading</h1>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      {image && <img src={image} alt=\"Uploaded test\" style={{ maxWidth: '100%', height: 'auto' }} />}\n      <div id=\"canvasOutput\"></div>\n      <div>\n        <h2>Extracted Text</h2>\n        <pre>{text}</pre>\n      </div>\n      <div>\n        <h2>Grade</h2>\n        <p>{grade}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default TestGrading;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}