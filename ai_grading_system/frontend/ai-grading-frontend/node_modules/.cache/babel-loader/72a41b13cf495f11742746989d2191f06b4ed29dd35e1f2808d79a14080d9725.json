{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhprasad/ai_grading_system/frontend/ai-grading-frontend/src/TestGrading/TestGrading.js\",\n  _s = $RefreshSig$();\n// src/TestGrading/TestGrading.js\nimport React, { useState, useEffect } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestGrading = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [grade, setGrade] = useState(null);\n  const [cvReady, setCvReady] = useState(false);\n  useEffect(() => {\n    const handleCvReady = () => {\n      setCvReady(true);\n    };\n    document.addEventListener('opencvReady', handleCvReady);\n    return () => {\n      document.removeEventListener('opencvReady', handleCvReady);\n    };\n  }, []);\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    setImage(URL.createObjectURL(file));\n    if (cvReady) {\n      processImage(file);\n    } else {\n      console.error('OpenCV.js is not ready.');\n    }\n  };\n  const processImage = file => {\n    const img = new Image();\n    img.src = URL.createObjectURL(file);\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n      const src = cv.imread(canvas);\n      const gray = new cv.Mat();\n      cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      // Detect circles (assuming the answers are marked with circles)\n      const circles = new cv.Mat();\n      cv.HoughCircles(gray, circles, cv.HOUGH_GRADIENT, 1, gray.rows / 8, 100, 30, 1, 30);\n\n      // Draw circles on the original image for visualization\n      for (let i = 0; i < circles.cols; ++i) {\n        const x = circles.data32F[i * 3];\n        const y = circles.data32F[i * 3 + 1];\n        const radius = circles.data32F[i * 3 + 2];\n        cv.circle(src, new cv.Point(x, y), radius, new cv.Scalar(255, 0, 0, 255), 3);\n      }\n      cv.imshow('canvasOutput', src);\n\n      // Extract text using Tesseract\n      Tesseract.recognize(canvas, 'eng', {\n        logger: m => console.log(m)\n      }).then(({\n        data: {\n          text\n        }\n      }) => {\n        console.log(text);\n        setText(text);\n        gradeTest(text);\n      }).catch(err => {\n        console.error(err);\n      });\n\n      // Clean up\n      src.delete();\n      gray.delete();\n      circles.delete();\n    };\n  };\n  const gradeTest = extractedText => {\n    fetch('http://localhost:5000/grade-test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: extractedText\n      })\n    }).then(response => response.json()).then(data => setGrade(data.grade)).catch(error => console.error('Error:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Grading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Uploaded test\",\n      style: {\n        maxWidth: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvasOutput\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Grade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: grade\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(TestGrading, \"/Lh4jqfrKevRIdhtRgslEFBnB1o=\");\n_c = TestGrading;\nexport default TestGrading;\nvar _c;\n$RefreshReg$(_c, \"TestGrading\");","map":{"version":3,"names":["React","useState","useEffect","Tesseract","jsxDEV","_jsxDEV","TestGrading","_s","image","setImage","text","setText","grade","setGrade","cvReady","setCvReady","handleCvReady","document","addEventListener","removeEventListener","handleImageUpload","e","file","target","files","URL","createObjectURL","processImage","console","error","img","Image","src","onload","canvas","createElement","ctx","getContext","width","height","drawImage","cv","imread","gray","Mat","cvtColor","COLOR_RGBA2GRAY","circles","HoughCircles","HOUGH_GRADIENT","rows","i","cols","x","data32F","y","radius","circle","Point","Scalar","imshow","recognize","logger","m","log","then","data","gradeTest","catch","err","delete","extractedText","fetch","method","headers","body","JSON","stringify","response","json","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","alt","style","maxWidth","id","_c","$RefreshReg$"],"sources":["/Users/rishabhprasad/ai_grading_system/frontend/ai-grading-frontend/src/TestGrading/TestGrading.js"],"sourcesContent":["// src/TestGrading/TestGrading.js\nimport React, { useState, useEffect } from 'react';\nimport Tesseract from 'tesseract.js';\n\nconst TestGrading = () => {\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [grade, setGrade] = useState(null);\n  const [cvReady, setCvReady] = useState(false);\n\n  useEffect(() => {\n    const handleCvReady = () => {\n      setCvReady(true);\n    };\n    document.addEventListener('opencvReady', handleCvReady);\n    return () => {\n      document.removeEventListener('opencvReady', handleCvReady);\n    };\n  }, []);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    setImage(URL.createObjectURL(file));\n    if (cvReady) {\n      processImage(file);\n    } else {\n      console.error('OpenCV.js is not ready.');\n    }\n  };\n\n  const processImage = (file) => {\n    const img = new Image();\n    img.src = URL.createObjectURL(file);\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n\n      const src = cv.imread(canvas);\n      const gray = new cv.Mat();\n      cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      // Detect circles (assuming the answers are marked with circles)\n      const circles = new cv.Mat();\n      cv.HoughCircles(gray, circles, cv.HOUGH_GRADIENT, 1, gray.rows / 8, 100, 30, 1, 30);\n\n      // Draw circles on the original image for visualization\n      for (let i = 0; i < circles.cols; ++i) {\n        const x = circles.data32F[i * 3];\n        const y = circles.data32F[i * 3 + 1];\n        const radius = circles.data32F[i * 3 + 2];\n        cv.circle(src, new cv.Point(x, y), radius, new cv.Scalar(255, 0, 0, 255), 3);\n      }\n\n      cv.imshow('canvasOutput', src);\n\n      // Extract text using Tesseract\n      Tesseract.recognize(\n        canvas,\n        'eng',\n        {\n          logger: (m) => console.log(m),\n        }\n      )\n        .then(({ data: { text } }) => {\n          console.log(text);\n          setText(text);\n          gradeTest(text);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n\n      // Clean up\n      src.delete();\n      gray.delete();\n      circles.delete();\n    };\n  };\n\n  const gradeTest = (extractedText) => {\n    fetch('http://localhost:5000/grade-test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ text: extractedText }),\n    })\n      .then((response) => response.json())\n      .then((data) => setGrade(data.grade))\n      .catch((error) => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <h1>Test Grading</h1>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      {image && <img src={image} alt=\"Uploaded test\" style={{ maxWidth: '100%', height: 'auto' }} />}\n      <div id=\"canvasOutput\"></div>\n      <div>\n        <h2>Extracted Text</h2>\n        <pre>{text}</pre>\n      </div>\n      <div>\n        <h2>Grade</h2>\n        <p>{grade}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default TestGrading;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}